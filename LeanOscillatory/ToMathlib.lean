import LeanOscillatory.Basic

namespace Complex

-- lemma ne_zero_of_im_pos {s : ‚ÑÇ} (hs : 0 < s.im) : s ‚â† 0 :=
--   fun h ‚Ü¶ (zero_im ‚ñ∏ h ‚ñ∏ hs).false

lemma ne_zero_of_im_ne_zero {s : ‚ÑÇ} (hs : s.im ‚â† 0) : s ‚â† 0 :=
  fun h ‚Ü¶ zero_im ‚ñ∏ h ‚ñ∏ hs <| by rfl

end Complex

section ContDiffOn

/- Todo: generalize to ordered field -/

variable {a b : ‚Ñù}
variable {n : WithTop ‚Ñï‚àû}
variable {f : ‚Ñù ‚Üí ‚Ñù}

open Real Interval

theorem ContDiffOn.continuousOn_derivWithin_uIcc (h : ContDiffOn ‚Ñù n f [[a, b]])
    (hn : 1 ‚â§ n) : ContinuousOn (derivWithin f [[a, b]]) [[a, b]] := by
  by_cases hab : b = a
  ¬∑ simp [hab]
  ¬∑ exact h.continuousOn_derivWithin (uniqueDiffOn_Icc (by simp [hab])) hn

section Analysis.Calculus.IteratedDeriv

theorem ContDiffOn.continuousOn_iteratedDerivWithin_uIcc
    {m : ‚Ñï} (h : ContDiffOn ‚Ñù n f [[a, b]])
    (hmn : m ‚â§ n) : ContinuousOn (iteratedDerivWithin m f [[a, b]]) [[a, b]] := by
  by_cases hab : b = a
  ¬∑ simp [hab]
  ¬∑ exact h.continuousOn_iteratedDerivWithin hmn (uniqueDiffOn_Icc (by simp [hab]))

variable {x : ‚Ñù}

theorem ContDiffWithinAt.differentiableWithinAt_iteratedDerivWithin_uIcc {m : ‚Ñï}
    (h : ContDiffWithinAt ‚Ñù n f [[a, b]] x) (hx : x ‚àà [[a, b]]) (hmn : m < n) :
    DifferentiableWithinAt ‚Ñù (iteratedDerivWithin m f [[a, b]]) [[a, b]] x := by
  by_cases hab : b = a
  ¬∑ simp [hab]
  ¬∑ refine h.differentiableWithinAt_iteratedDerivWithin hmn ?_
    rw [Set.insert_eq_of_mem hx]
    exact uniqueDiffOn_Icc (by simp [hab])

theorem ContDiffWithinAt.differentiableWithinAt_derivWithin_uIcc
    (h : ContDiffWithinAt ‚Ñù n f [[a, b]] x) (hx : x ‚àà [[a, b]]) (hmn : 1 < n) :
    DifferentiableWithinAt ‚Ñù (derivWithin f [[a, b]]) [[a, b]] x := by
  convert h.differentiableWithinAt_iteratedDerivWithin_uIcc hx hmn
  ext
  exact iteratedDerivWithin_one.symm

end Analysis.Calculus.IteratedDeriv

end ContDiffOn

section Analysis.Calculus.IteratedDeriv.Defs

variable {ùïú : Type*} [NontriviallyNormedField ùïú] {F : Type*} [NormedAddCommGroup F]
  [NormedSpace ùïú F] {f : ùïú ‚Üí F} {s : Set ùïú} {x : ùïú}

open scoped Topology
open Filter Asymptotics Set

theorem iteratedDerivWithin_two {x : ùïú} :
    iteratedDerivWithin 2 f s x = derivWithin (derivWithin f s) s x := by
  rw [iteratedDerivWithin_succ]
  congr
  ext
  exact iteratedDerivWithin_one

end Analysis.Calculus.IteratedDeriv.Defs

section Analysis.Complex.RealDeriv

variable {s : Set ‚Ñù} {z : ‚Ñù}

open Complex in
theorem HasDerivWithinAt.ofReal_comp {f : ‚Ñù ‚Üí ‚Ñù} {u : ‚Ñù} (hf : HasDerivWithinAt f u s z) :
    HasDerivWithinAt (fun y : ‚Ñù => ‚Üë(f y) : ‚Ñù ‚Üí ‚ÑÇ) u s z := by
  simpa only [ofRealCLM_apply, ofReal_one, real_smul, mul_one] using
    ofRealCLM.hasDerivWithinAt.scomp z hf <| fun _ _ ‚Ü¶ Set.mem_univ _

end Analysis.Complex.RealDeriv

-- section Mathlib.Data.Real.Sign

-- namespace Real

-- theorem abs_sign_le {r : ‚Ñù} : |r.sign| ‚â§ 1 := by
--   rcases sign_apply_eq r with h|h|h
--     <;> { rw [h]; simp }

-- theorem abs_sign_eq {r : ‚Ñù} (hr : r ‚â† 0) : |r.sign| = 1 := by
--   rcases sign_apply_eq_of_ne_zero r hr with h|h
--     <;> { rw [h]; simp }

-- end Real

-- end Mathlib.Data.Real.Sign

section Mathlib.Topology.Order.OrderClosed

variable {Œ± : Type*}
variable [TopologicalSpace Œ±] [LinearOrder Œ±] [OrderClosedTopology Œ±]

open Set

theorem uIoo_mem_nhds {a b x : Œ±} (hx : x ‚àà uIoo a b) : uIoo a b ‚àà nhds x := by
  rcases lt_trichotomy a b with h | h | h
  ¬∑ exact uIoo_of_lt h ‚ñ∏ Ioo_mem_nhds (uIoo_of_lt h ‚ñ∏ hx).1 (uIoo_of_lt h ‚ñ∏ hx).2
  ¬∑ exact False.elim <| notMem_empty x (uIoo_self (a := b) ‚ñ∏ h ‚ñ∏ hx)
  ¬∑ exact uIoo_of_gt h ‚ñ∏ Ioo_mem_nhds (uIoo_of_gt h ‚ñ∏ hx).1 (uIoo_of_gt h ‚ñ∏ hx).2

end Mathlib.Topology.Order.OrderClosed


section Mathlib.MeasureTheory.Integral.IntervalIntegral.Basic

namespace IntervalIntegrable

open MeasureTheory Set Filter Function

open scoped Topology Filter Interval

variable {ùïú E : Type*} [NormedAddCommGroup E]

variable [NormedRing ùïú] [Module ùïú E] [NormSMulClass ùïú E]

variable {f : ‚Ñù ‚Üí ùïú} {a b : ‚Ñù} {Œº : Measure ‚Ñù} [NoAtoms Œº]
variable {g : ‚Ñù ‚Üí E}

theorem smul_continuousOn (hf : IntervalIntegrable f Œº a b)
    (hg : ContinuousOn g [[a, b]]) : IntervalIntegrable (fun x => f x ‚Ä¢ g x) Œº a b := by
  rw [intervalIntegrable_iff'] at hf ‚ä¢
  apply hf.smul_continuousOn hg isCompact_uIcc

theorem continuousOn_smul (hg : IntervalIntegrable g Œº a b)
    (hf : ContinuousOn f [[a, b]]) : IntervalIntegrable (fun x => f x ‚Ä¢ g x) Œº a b := by
  rw [intervalIntegrable_iff'] at hg ‚ä¢
  apply hg.continuousOn_smul hf isCompact_uIcc

end IntervalIntegrable

end Mathlib.MeasureTheory.Integral.IntervalIntegral.Basic

section Mathlib.MeasureTheory.Integral.IntervalIntegral.IntegrationByParts

namespace intervalIntegral

section SMul

open MeasureTheory Set

open scoped Topology Interval

variable {a b : ‚Ñù}

variable {ùïú : Type*} [NontriviallyNormedField ùïú]
variable {E : Type*} [NormedAddCommGroup E] [NormedSpace ùïú E] [NormedSpace ‚Ñù E] [CompleteSpace E]
variable [NormedAlgebra ‚Ñù ùïú] [IsScalarTower ‚Ñù ùïú E]

variable {u u' : ‚Ñù ‚Üí ùïú}
variable {v v' : ‚Ñù ‚Üí E}

theorem integral_deriv_smul_eq_sub_of_hasDeriv_right (hu : ContinuousOn u [[a, b]])
    (hv : ContinuousOn v [[a, b]])
    (huu' : ‚àÄ x ‚àà Ioo (min a b) (max a b), HasDerivWithinAt u (u' x) (Ioi x) x)
    (hvv' : ‚àÄ x ‚àà Ioo (min a b) (max a b), HasDerivWithinAt v (v' x) (Ioi x) x)
    (hu' : IntervalIntegrable u' volume a b)
    (hv' : IntervalIntegrable v' volume a b) :
    ‚à´ x in a..b, u' x ‚Ä¢ v x + u x ‚Ä¢ v' x = u b ‚Ä¢ v b - u a ‚Ä¢ v a := by
  simp_rw [add_comm]
  apply integral_eq_sub_of_hasDeriv_right (hu.smul hv) fun x hx ‚Ü¶ (huu' x hx).smul (hvv' x hx)
  exact (hv'.continuousOn_smul hu).add (hu'.smul_continuousOn hv)

/-- **Integration by parts** (vector-valued). -/
theorem integral_smul_deriv_eq_deriv_smul_of_hasDeriv_right
    (hu : ContinuousOn u [[a, b]]) (hv : ContinuousOn v [[a, b]])
    (huu' : ‚àÄ x ‚àà Ioo (min a b) (max a b), HasDerivWithinAt u (u' x) (Ioi x) x)
    (hvv' : ‚àÄ x ‚àà Ioo (min a b) (max a b), HasDerivWithinAt v (v' x) (Ioi x) x)
    (hu' : IntervalIntegrable u' volume a b) (hv' : IntervalIntegrable v' volume a b) :
    ‚à´ x in a..b, u x ‚Ä¢ v' x = u b ‚Ä¢ v b - u a ‚Ä¢ v a - ‚à´ x in a..b, u' x ‚Ä¢ v x := by
  rw [‚Üê integral_deriv_smul_eq_sub_of_hasDeriv_right hu hv huu' hvv' hu' hv', ‚Üê integral_sub]
  ¬∑ simp_rw [add_sub_cancel_left]
  ¬∑ exact (hu'.smul_continuousOn hv).add (hv'.continuousOn_smul hu)
  ¬∑ exact hu'.smul_continuousOn hv


/-- **Integration by parts** (vector-valued).
Special case of `integral_smul_deriv_eq_deriv_smul_of_hasDeriv_right`
where the functions have a two-sided derivative in the interior of the interval. -/
theorem integral_smul_deriv_eq_deriv_smul_of_hasDerivAt
    (hu : ContinuousOn u [[a, b]]) (hv : ContinuousOn v [[a, b]])
    (huu' : ‚àÄ x ‚àà Ioo (min a b) (max a b), HasDerivAt u (u' x) x)
    (hvv' : ‚àÄ x ‚àà Ioo (min a b) (max a b), HasDerivAt v (v' x) x)
    (hu' : IntervalIntegrable u' volume a b) (hv' : IntervalIntegrable v' volume a b) :
    ‚à´ x in a..b, u x ‚Ä¢ v' x = u b ‚Ä¢ v b - u a ‚Ä¢ v a - ‚à´ x in a..b, u' x ‚Ä¢ v x :=
  integral_smul_deriv_eq_deriv_smul_of_hasDeriv_right hu hv
        (fun x hx ‚Ü¶ (huu' x hx).hasDerivWithinAt) (fun x hx ‚Ü¶ (hvv' x hx).hasDerivWithinAt) hu' hv'

/-- **Integration by parts** (vector-valued). Special case of
`intervalIntegrable.integral_smul_deriv_eq_deriv_smul_of_hasDeriv_right`
where the functions have a one-sided derivative at the endpoints. -/
theorem integral_smul_deriv_eq_deriv_smul_of_hasDerivWithinAt
    (hu : ‚àÄ x ‚àà [[a, b]], HasDerivWithinAt u (u' x) [[a, b]] x)
    (hv : ‚àÄ x ‚àà [[a, b]], HasDerivWithinAt v (v' x) [[a, b]] x)
    (hu' : IntervalIntegrable u' volume a b) (hv' : IntervalIntegrable v' volume a b) :
    ‚à´ x in a..b, u x ‚Ä¢ v' x = u b ‚Ä¢ v b - u a ‚Ä¢ v a - ‚à´ x in a..b, u' x ‚Ä¢ v x :=
  integral_smul_deriv_eq_deriv_smul_of_hasDerivAt
    (fun x hx ‚Ü¶ (hu x hx).continuousWithinAt)
    (fun x hx ‚Ü¶ (hv x hx).continuousWithinAt)
    (fun x hx ‚Ü¶ hu x (mem_Icc_of_Ioo hx) |>.hasDerivAt (Icc_mem_nhds hx.1 hx.2))
    (fun x hx ‚Ü¶ hv x (mem_Icc_of_Ioo hx) |>.hasDerivAt (Icc_mem_nhds hx.1 hx.2))
    hu' hv'

/-- **Integration by parts** (vector-valued). Special case of
`intervalIntegrable.integral_smul_deriv_eq_deriv_smul_of_hasDeriv_right`
where the functions have a derivative also at the endpoints. -/
theorem integral_smul_deriv_eq_deriv_smul
    (hu : ‚àÄ x ‚àà [[a, b]], HasDerivAt u (u' x) x) (hv : ‚àÄ x ‚àà [[a, b]], HasDerivAt v (v' x) x)
    (hu' : IntervalIntegrable u' volume a b) (hv' : IntervalIntegrable v' volume a b) :
    ‚à´ x in a..b, u x ‚Ä¢ v' x = u b ‚Ä¢ v b - u a ‚Ä¢ v a - ‚à´ x in a..b, u' x ‚Ä¢ v x :=
  integral_smul_deriv_eq_deriv_smul_of_hasDerivWithinAt
    (fun x hx ‚Ü¶ (hu x hx).hasDerivWithinAt) (fun x hx ‚Ü¶ (hv x hx).hasDerivWithinAt) hu' hv'

end SMul

end intervalIntegral

end Mathlib.MeasureTheory.Integral.IntervalIntegral.IntegrationByParts
